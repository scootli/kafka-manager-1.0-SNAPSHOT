package baidu.scloud.data.aggregate.visitorpage;

import java.util.Map;
import java.util.Vector;

import org.apache.log4j.Logger;

import baidu.scloud.data.aggregate.base64.Base64;
import baidu.scloud.data.aggregate.client.PhoenixClient;
import baidu.scloud.data.aggregate.heap.MinHeap;
import baidu.scloud.data.aggregate.heap.VisitorPage;

/**
 * concurrent process visitor page
 * 
 *@param: PhoenixClient: the Phoenix operator Client object
 *@param domainStr: where condition domain list
 *@param date:
 *@param topk:
 *@param siteMap : from domain_id to domain string 
 */
public class VisitorpageCellSiteAggregate implements Runnable{
	static Logger logger = Logger.getLogger(VisitorpageCellSiteAggregate.class);
	private PhoenixClient phoenixClient;
	private static int BATCHUNIT = 100;
	Map<Integer,String> siteMap;
	private String domainStr;
	private int date;
	private int topk;
	
	public VisitorpageCellSiteAggregate(PhoenixClient phoenix_client,String domain_str,int date,
			int topk,Map<Integer,String> site_map){
		phoenixClient = phoenix_client;
		domainStr = domain_str;
		this.date = date;
		this.topk = topk;
		this.siteMap = site_map;
	}

	public void run() {
		String whereConds = "date=" + date + " and domain in " + domainStr + " group by domain, site, uri";
		String projectField = "domain, site, uri, SUM(req_pv_count)";
		Vector<String> visitorPageDomain = phoenixClient.getExecuteResult("cf_rt_visitor_page_v2",projectField,whereConds);
		if(visitorPageDomain.isEmpty()){
			logger.error("No vistitor page site data. date: " + date);
			return;
		}
		String curDomain = "";
		String curSite = "";
		String preDomain = "";
		String preSite = "";
		int current = 0;
		VisitorPage[] data = new VisitorPage[topk];
		MinHeap<VisitorPage> heap = null;
		
		int count = 0;
		Vector<String> sqls  = new Vector<String>();
		
		//traverse sql result
		for(String vpData : visitorPageDomain){
			String[] topVpArr = vpData.split("#");
			int len = topVpArr.length;
			curDomain = topVpArr[0].trim();
			curSite = topVpArr[1].trim();
			if(len != 4 || curDomain == "" || curSite == ""){
				continue;
			}
			
			//when saw next domain site , write preDomain preSite to phoenix
			if(!curDomain.equalsIgnoreCase(preDomain) || !curSite.equalsIgnoreCase(preSite)){
				if(!preDomain.equalsIgnoreCase("") && !preSite.equalsIgnoreCase("")){
					sqls.add(getInsertVisitorPageSiteSql(data,preDomain,preSite,date,topk,current));
					count++;
					if(count >= BATCHUNIT){//execute sql
						int result = phoenixClient.executeBatch(sqls);
						if(result > 0){
							logger.error("phoenix connect error. vistitor page site. date: " + date + " topk: " + topk);
							return;
						}
						count = 0;
						sqls.clear();
					}
					data = new VisitorPage[topk];
					heap = null;
					current = 0;
				}
				preDomain = curDomain;
				preSite = curSite;
			}
			//Get topk uri with minHeap
			VisitorPage value = new VisitorPage(siteMap.get(Integer.parseInt(topVpArr[1].trim())) + Base64.getFromBase64(topVpArr[2].trim()),
				Long.parseLong(topVpArr[3].trim()));
			if(current < topk){
				data[current] = value;
				if(current == (topk - 1)){
					//convert min heap
					heap = new MinHeap<VisitorPage>(data);
				}
			}/*else if(current == topk){
				//convert min heap
				heap = new MinHeap<VisitorPage>(data);
			}*/else{
				//when value great than root, replace the root and retidy the heap
				VisitorPage root = heap.getRoot();
				if(root.less_override(value))
				{
				   heap.setRoot(value);
				}
			}
			current++;
		}
		
		if(count > 0 ){
			//execute last times
			sqls.add(getInsertVisitorPageSiteSql(data,curDomain,curSite,date,topk,current));
			int result = phoenixClient.executeBatch(sqls);
			if(result > 0){
				logger.error("phoenix connect error. vistitor page site. date: " + date + " topk: " + topk);
				return;
			}
		}
	}
	
	/**
	 * get insert visitor page(site) data into phoenix sql
	 * @param data
	 * @param domain
	 * @param site
	 * @param date
	 * @param topk
	 * @param dataLen : data actual size
	 * 
	 * @return the insert sql
	 */
	public String getInsertVisitorPageSiteSql(VisitorPage[] data,String domain,String site, int date,int topk,int dataLen){
		String content = VisitorPageUtils.getVistorPageJsonContent(data,topk,dataLen);
		String sql = "upsert into cf_rt_summary_visitor_page_of_day_site values(" + 
					domain + "," + date + "," + site + ",'" + content + "')";
		
		return sql;
	}
}
