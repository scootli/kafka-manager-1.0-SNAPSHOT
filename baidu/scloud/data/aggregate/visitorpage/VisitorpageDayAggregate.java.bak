package baidu.scloud.data.aggregate.visitorpage;

import java.util.Map;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import org.apache.log4j.Logger;

import baidu.scloud.data.aggregate.base.DayAggregate;
import baidu.scloud.data.aggregate.client.MySQLClient;
import baidu.scloud.data.aggregate.client.PhoenixClient;

/**
 * Get visitorpage hour data from hour data table
 * @param PhoenixClient: the Phoenix operator Client object
 */
public class VisitorpageDayAggregate implements DayAggregate{
	static Logger logger = Logger.getLogger(VisitorpageDayAggregate.class);
	private static int DOMAIN_QUERY_LIMIT = 500;
	private PhoenixClient phoenixClient;
	private MySQLClient mysqlClient;
	
	public VisitorpageDayAggregate(org.apache.commons.configuration.PropertiesConfiguration config){
		phoenixClient = new PhoenixClient(config);
		mysqlClient = new MySQLClient(config);
		DOMAIN_QUERY_LIMIT = phoenixClient.getConf().getInt("domain_query_limit");
	}
	
	/**
	 * Get visitor page domain hour data from hour data table. default yesterday
	 * @param date
	 * @param topk:  calculate topk visitor uri with heap 
	 * 
	 * @return execute result status: 0 success >0 failed
	 */
	public int summaryDayDomainData(int date,int topk){
		logger.info("enter visitorpage domain aggregate");
		//divide all sites into many parts
		Vector<String> domainVect = phoenixClient.getDomainByDay("cf_rt_visitor_page_v2",date);
		if(domainVect.isEmpty()){
			logger.error("No vistitor page domain data. date: " + date);
			return 1;
		}
		int domainLen = domainVect.size();
		Vector<String> tmpSiteVect = new Vector<String>();
		
		int current = 0;
		String domainStr = "(";
		
		int poolSize = 0;
		Vector<String> domainStrVect  = new Vector<String>();
		Vector<Map<Integer,String>> siteMapVect = new Vector<Map<Integer,String>>();
		
		logger.info("visitor page domain start top uri");
		while(current < domainLen){
			int end = (domainLen > (current + DOMAIN_QUERY_LIMIT)?  current + DOMAIN_QUERY_LIMIT: domainLen);
			for(int index = current;index < end;index++){
				String curData = domainVect.get(index);
				if(index != end - 1){
					domainStr += (curData + ",");
				}else{
					domainStr += (curData + ")");
				}
				tmpSiteVect.add(curData);
			}
			Map<Integer,String> siteMap = mysqlClient.GetSiteValue(tmpSiteVect);
			if(siteMap.isEmpty()){
				logger.error("Get domain site from domain_map mysql table failed! visitorpage domain");
				return 1;
			}
			
			siteMapVect.add(siteMap);
			poolSize++;
			domainStrVect.add(domainStr);
			
			current += DOMAIN_QUERY_LIMIT;
			domainStr = "(";
		}
		
		//start all visitor ip domain aggregate task
		ExecutorService vpageDomainPool = Executors.newFixedThreadPool(poolSize);
		for(int index = 0;index < poolSize;index++){
			vpageDomainPool.execute(new VisitorpageCellDomainAggregate(phoenixClient,domainStrVect.get(index),date,topk,siteMapVect.get(index)));
		}
		
		//wait all thread tasks complete
		vpageDomainPool.shutdown();
		try {
			vpageDomainPool.awaitTermination(Long.MAX_VALUE,TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			logger.error("visitor page domain Generate a Interrupted Requests");
		}
		
		logger.info("leave visitorpage domain aggregate");
		return 0;
	}
	
	/**
	 * Get visitor page site hour data from hour data table. default yesterday
	 * @param date
	 * @param topk: calculate topk visitor uri with heap 
	 * 
	 * @return execute result status: 0 success >0 failed
	 */
	public int summaryDaySiteData(int date,int topk){
		logger.info("enter visitorpage site aggregate");
		//divide all sites into many parts
		Vector<String> domainVect = phoenixClient.getDomainByDay("cf_rt_visitor_page_v2",date);
		if(domainVect.isEmpty()){
			return 1;
		}
		int domainLen = domainVect.size();
		Vector<String> tmpSiteVect = new Vector<String>();
		
		int current = 0;
		String domainStr = "(";
		
		int poolSize = 0;
		Vector<String> domainStrVect  = new Vector<String>();
		Vector<Map<Integer,String>> siteMapVect = new Vector<Map<Integer,String>>();
		
		logger.info("visitor page site start top uri");
		while(current < domainLen){
			int end = (domainLen > (current + DOMAIN_QUERY_LIMIT)?  current + DOMAIN_QUERY_LIMIT: domainLen);
			for(int index = current;index < end;index++){
				String curData = domainVect.get(index);
				if(index != end - 1){
					domainStr += (curData + ",");
				}else{
					domainStr += (curData + ")");
				}
				tmpSiteVect.add(curData);
			}
			
			Map<Integer,String> siteMap = mysqlClient.GetSiteValue(tmpSiteVect);
			if(siteMap.isEmpty()){
				logger.error("Get domain site from domain_map mysql table failed! visitorpage site");
				return 1;
			}
			siteMapVect.add(siteMap);
			poolSize++;
			domainStrVect.add(domainStr);
			
			current += DOMAIN_QUERY_LIMIT;
			domainStr = "(";
		}
		
		//start all visitor ip site aggregate task
		ExecutorService vpageSitePool = Executors.newFixedThreadPool(poolSize);
		for(int index = 0;index < poolSize;index++){
			vpageSitePool.execute(new VisitorpageCellSiteAggregate(phoenixClient,domainStrVect.get(index),date,topk,siteMapVect.get(index)));
		}
		
		//wait all thread tasks complete
		vpageSitePool.shutdown();
		try {
			vpageSitePool.awaitTermination(Long.MAX_VALUE,TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			logger.error("visitor page site Generate a Interrupted Requests");
		}
		
		logger.info("leave visitorpage site aggregate");
		return 0;
	}
}
