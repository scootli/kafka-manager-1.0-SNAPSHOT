package baidu.scloud.data.aggregate.visitorip;

import java.util.Vector;
import org.apache.log4j.Logger;

import baidu.scloud.data.aggregate.base.HourAggregate;
import baidu.scloud.data.aggregate.client.PhoenixClient;
import baidu.scloud.data.aggregate.utils.CommonUtils;
//import baidu.scloud.data.mapreduce.visitorip.domain.CountDistnctJob;

/**
 * Get visitorip hour data from hour data table
 * @param PhoenixClient: the Phoenix operator Client object
 * @param hbaseClient: the hbase operator Client object
 */
public class VisitoripHourAggregate implements HourAggregate{
	static Logger logger = Logger.getLogger(VisitoripHourAggregate.class);
	private PhoenixClient phoenixClient;
	private static int BATCHUNIT = 1000;
	private static String CURRENTHOUR = CommonUtils.TimeStamp2Date(System.currentTimeMillis());
	private static int DOMAIN_QUERY_LIMIT = 5000;
	
	public VisitoripHourAggregate(PhoenixClient phoenix_client){
		this.phoenixClient = phoenix_client;
	}
	
	/**
	 * Get visitorip hour domain data from domain hour data table. default yesterday
	 * @param date
	 * @param hour
	 * 
	 * @return execute result status: 0 success >0 failed
	 */
	public int summaryHourDomainData(int date,int hour){
		//plan A: hbase mapreduce + write from hbase data to phoenix  
		/*CountDistnctJob cdj = new CountDistnctJob();
		logger.info("visitor ip mapreduce start");
		cdj.getDistnctCount(hbaseClient.conf,"cf_rt_visitor_ip_v2");
		logger.info("visitor ip mapreduce end");*/
		
		//plan B: hbase coprocessor
		/*String condition = "date=" + date + " and hour=" + hour + " group by domain,region";
		String projectField = "domain, region";
		Vector<String> visitorIpDomain = phoenixClient.getExecuteResult("cf_rt_visitor_ip_v2",projectField,condition);
		
		logger.info("Visitor Ip Get domain and region successfully. date: " + date + " hour: " + hour);
		
		//HBase coprocessor get domain+date+hour+region ip_num
		int count = 0;
		Vector<String> sqls  = new Vector<String>();
		
		for(String domainRegion : visitorIpDomain){
			String[] tmpArray = domainRegion.split("-");
			String domain = tmpArray[0].trim();
			String region = tmpArray[1].trim();
			//logger.info("start Get ip_num from cf_rt_visitor_ip_v2 and date=" + date + " hour=" + 
			//		hour + " domain=" + domain + " region=" + region);
			long ipNum = hbaseClient.getVisitorIpNum("cf_rt_visitor_ip_v2",domain,date,hour,region,"");
			//logger.info("end Get ip_num from cf_rt_visitor_ip_v2 and date=" + date + " hour=" + 
			//		hour + " domain=" + domain + " region=" + region);
			sqls.add(getInsertVisitorIpDomainSql(domain,date,hour,region,ipNum));
			count++;
			if(count >= BATCHUNIT){//execute sql
				phoenixClient.executeBatch(sqls);
				logger.info("Visitor Ip domain insert phoenix successfully. one sql is: " + sqls.get(0));
				count = 0;
				sqls.clear();
			}
		}
		if(count > 0 ){
			//execute last times
			phoenixClient.executeBatch(sqls);
			sqls.clear();
		}*/
		
		logger.info("enter visitorip domain aggregate");
		//plan C: divide all domains into many parts
		Vector<String> domainVect = phoenixClient.getDomainByHour("cf_rt_visitor_ip_v2",date,hour);
		if(domainVect.isEmpty()){
			logger.error("No vistitor ip domain data. date: " + date + " hour: " + hour);
			return 1;
		}
		int domainLen = domainVect.size();
		int current = 0;
		String domain_str = "(";
		
		//batch insert phoenix
		int count = 0;
		Vector<String> sqls  = new Vector<String>();
		
		logger.info("visitor ip domain start count distinct");
		while(current < domainLen){
			int end = (domainLen > (current + DOMAIN_QUERY_LIMIT)?  current + DOMAIN_QUERY_LIMIT: domainLen);
			for(int index = current;index < end;index++){
				if(index != end - 1){
					domain_str += (domainVect.get(index) + ",");
				}else{
					domain_str += (domainVect.get(index) + ")");
				}
			}
			
			String condition = "domain in" + domain_str +" and date=" + date + " and hour=" + hour + " group by domain,region";
			String projectField = "domain, region,count(distinct ip)";
			Vector<String> visitorIpResult = phoenixClient.getExecuteResult("cf_rt_visitor_ip_v2",projectField,condition);
			if(visitorIpResult.isEmpty()){
				return 1;
			}
			//write to phoenix
			for(String vipResult : visitorIpResult){
				String[] tmpArray = vipResult.split("-");
				String domain = tmpArray[0].trim();
				String region = tmpArray[1].trim();
				String ipNum = tmpArray[2].trim();
				sqls.add(getInsertVisitorIpDomainSql(domain,date,hour,region,ipNum));
				count++;
				if(count >= BATCHUNIT){//execute sql
					int result = phoenixClient.executeBatch(sqls);
					if(result > 0){
						return result;
					}
					//logger.info("Visitor Ip domain insert phoenix successfully. one sql is: " + sqls.get(0));
					count = 0;
					sqls.clear();
				}
			}
			
			current += DOMAIN_QUERY_LIMIT;
			domain_str = "(";
		}
		
		if(count > 0 ){
			//execute last times
			int result =  phoenixClient.executeBatch(sqls);
			if(result > 0){
				return result;
			}
			sqls.clear();
		}
		logger.info("leave visitorip domain aggregate");
		
		return 0;
	}
	
	/**
	 * Get visitorip hour site data from site hour data table. default yesterday
	 * @param date
	 * @param hour
	 * 
	 * @return execute result status: 0 success >0 failed
	 */
	public int summaryHourSiteData(int date,int hour){
		//plan A: hbase mapreduce + write from hbase data to phoenix  
		/*CountDistnctJob cdj = new CountDistnctJob();
		logger.info("visitor ip mapreduce start");
		cdj.getDistnctCount(hbaseClient.conf,"cf_rt_visitor_ip_v2");
		logger.info("visitor ip mapreduce end");*/
		
		//plan B: hbase coprocessor 
		/*String condition = "date=" + date + " and hour=" + hour + " group by domain,site,region";
		String projectField = "domain, site,region";
		Vector<String> visitorIpSite = phoenixClient.getExecuteResult("cf_rt_visitor_ip_v2",projectField,condition);
		
		logger.info("Visitor Ip Get domain site and region successfully. date: " + date + " hour: " + hour);
		
		//HBase coprocessor get domain+date+hour+region+site ip_num
		int count = 0;
		Vector<String> sqls  = new Vector<String>();
		for(String domainRegion : visitorIpSite){
			String[] tmpArray = domainRegion.split("-");
			String domain = tmpArray[0].trim();
			String site = tmpArray[1].trim();
			String region = tmpArray[2].trim();
			//logger.info("start Get ip_num from cf_rt_visitor_ip_v2 and date=" + date + " hour=" + 
			//		hour + " domain=" + domain + " region=" + region + " site=" + site);
			long ipNum = hbaseClient.getVisitorIpNum("cf_rt_visitor_ip_v2",domain,date,hour,region,site);
			//logger.info("end Get ip_num from cf_rt_visitor_ip_v2 and date=" + date + " hour=" + 
			//		hour + " domain=" + domain + " region=" + region + " site=" + site);
			sqls.add(getInsertVisitorIpSiteSql(domain,site,date,hour,region,ipNum));
			count++;
			if(count >= BATCHUNIT){//execute sql
				phoenixClient.executeBatch(sqls);
				logger.info("Visitor Ip site insert phoenix successfully. one sql is: " + sqls.get(0));
				count = 0;
				sqls.clear();
			}
		}
		if(count > 0 ){
			//execute last times
			phoenixClient.executeBatch(sqls);
			sqls.clear();
		}*/
		
		logger.info("enter visitorip site aggregate");
		//plan C: divide all domains into many parts
		Vector<String> domainVect = phoenixClient.getDomainByHour("cf_rt_visitor_ip_v2",date,hour);
		if(domainVect.isEmpty()){
			logger.error("No vistitor ip site data. date: " + date + " hour: " + hour);
			return 1;
		}
		int domainLen = domainVect.size();
		int current = 0;
		String domain_str = "(";
		
		//batch insert phoenix
		int count = 0;
		Vector<String> sqls  = new Vector<String>();
		
		logger.info("visitor ip site start count distinct");
		while(current < domainLen){
			int end = (domainLen > (current + DOMAIN_QUERY_LIMIT)?  current + DOMAIN_QUERY_LIMIT: domainLen);
			for(int index = current;index < end;index++){
				if(index != end - 1){
					domain_str += (domainVect.get(index) + ",");
				}else{
					domain_str += (domainVect.get(index) + ")");
				}
			}
			
			String condition = "domain in" + domain_str +" and date=" + date + " and hour=" + hour + " group by domain,region,site";
			String projectField = "domain, region,count(distinct ip),site";
			Vector<String> visitorIpResult = phoenixClient.getExecuteResult("cf_rt_visitor_ip_v2",projectField,condition);
			if(visitorIpResult.isEmpty()){
				return 1;
			}
			//write to phoenix
			for(String vipResult : visitorIpResult){
				String[] tmpArray = vipResult.split("-");
				String domain = tmpArray[0].trim();
				String region = tmpArray[1].trim();
				String ipNum = tmpArray[2].trim();
				String site = tmpArray[3].trim();
				
				sqls.add(getInsertVisitorIpSiteSql(domain,site,date,hour,region,ipNum));
				count++;
				if(count >= BATCHUNIT){//execute sql
					int result = phoenixClient.executeBatch(sqls);
					if(result > 0){
						return result;
					}
					//logger.info("Visitor Ip domain insert phoenix successfully. one sql is: " + sqls.get(0));
					count = 0;
					sqls.clear();
				}
			}
			
			current += DOMAIN_QUERY_LIMIT;
			domain_str = "(";
		}
		
		if(count > 0 ){
			//execute last times
			int result = phoenixClient.executeBatch(sqls);
			if(result > 0){
				return result;
			}
			sqls.clear();
		}
		logger.info("leave visitorip site aggregate");
		
		return 0;
	}
	
	/**
	 * get insert visitor ip(domain) data into phoenix sql
	 * @param domain
	 * @param date
	 * @param hour
	 * @param region
	 * @param ipNum
	 * 
	 * @return sql : insert sql
	 */
	public String  getInsertVisitorIpDomainSql(String domain,int date,int hour,String region,String ipNum){
		String insertVal = "";
		//access aggregating data: from req_hit_num to req_total_bandwidth
		for(int index = 0;index < 10;index++){
			insertVal += (0 + ",");
		}
		//se_type req_se_num region ip_num pv_num uv_num 
		insertVal += ("'ALL'" + "," + 0 + "," + "'" + region + "'" + "," + ipNum + "," + 0 + "," + 0 + ",");
		//attack_size attack_num domain date hour time
		insertVal += (0 + "," + 0 + "," + domain + "," + date + "," + hour + "," + CURRENTHOUR);
		
		String sql = "upsert into cf_rt_summary_of_hour_domain values(" + insertVal + ")";
		
		return sql;
	}
	
	/**
	 * insert visitor ip(site) data into phoenix
	 * @param domain
	 * @param site
	 * @param date
	 * @param hour
	 * @param region
	 * @param ipNum
	 * @return sql :  insert sql
	 */
	public String getInsertVisitorIpSiteSql(String domain,String site,int date,int hour,String region,String ipNum){
		String insertVal = "";
		//access aggregating data: from req_hit_num to req_total_bandwidth
		for(int index = 0;index < 10;index++){
			insertVal += (0 + ",");
		}
		//se_type req_se_num region ip_num pv_num uv_num 
		insertVal += ("'ALL'" + "," + 0 + "," + "'" + region + "'" + "," + ipNum + "," + 0 + "," + 0 + ",");
		//attack_size attack_num domain site date hour time
		insertVal += (0 + "," + 0 + "," + domain + "," + site + "," + date + "," + hour + "," + CURRENTHOUR);
		String sql = "upsert into cf_rt_summary_of_hour_site values(" + insertVal + ")";
		
		return sql;
	}
}
